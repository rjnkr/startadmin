/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    enabled: true
});


Ext.application({
    models: [
        'VliegtuigenLijst_Model',
        'LedenLijst_Model',
        'LedenAanwezig_Model',
        'Types_Model',
        'Daginfo_Model',
        'Startlijst_Model',
        'AppSettings_Model',
        'Rooster_Model',
        'CommStatusDetails_Model',
        'CommStatusNextSync_Model',
        'Startlijst_VliegersTreeview_Model',
        'FlarmStart_Model',
        'StartLijstVoorFlarm_Model',
        'FlarmPositie_Model',
        'ControleStartlijstFlarm_Model',
        'ControleDagOverzicht_Model',
        'Startlijst_VliegtuigenTreeview_Model',
        'Startlijst_VliegtuigLogboekModel',
        'Export_Model',
        'ControleStartlijstTijdelijkeLeden_Model'
    ],
    stores: [
        'LedenLijst_GridStore',
        'VliegtuigenLijst_GridStore',
        'Aanwezig_Leden_GridStore',
        'Startlijst_Vliegtuigen_Store',
        'Types_Banen_Store',
        'Types_WindRichting_Store',
        'Types_WindKracht_Store',
        'Daginfo_Store',
        'Types_StartMethode_Store',
        'Startlijst_GridStore',
        'Aanwezig_Vliegtuigen_GridStore',
        'Startlijst_Vlieger_Store',
        'Types_VliegtuigType_Store',
        'Aanmelden_Vliegtuig_Store',
        'Startlijst_Gezagvoerder_Store',
        'Types_SoortVlucht_Store',
        'Aanmelden_Lid_Store',
        'AppSettings_Store',
        'Types_Club_Store',
        'Types_Vliegvelden_Store',
        'Rooster_Store',
        'CommStatusDetails_Store',
        'CommStatusNextSync_Store',
        'Startlijst_Inzittende_Store',
        'Startlijst_OpRekening_Store',
        'Types_Lid_Store',
        'Types_SoortBedrijf_Store',
        'StartLijst_VliegerTreeview_Store',
        'FlarmStart_Store',
        'StartLijstVoorFlarm_Store',
        'FlarmPosities_Store',
        'ControleStartlijstFlarm_Store',
        'ControleDagOverzicht_GridStore',
        'ControleDagOverzichtLidStore',
        'Startlijst_SleepKisten_Store',
        'StartLijst_VliegtuigenTreeview_Store',
        'VliegtuigLogboek_Store',
        'Export_GridStore',
        'ControleStartlijstTijdelijk_Store',
        'DagInfo_Instructeurs_Store',
        'DagInfo_Startleiders_Store'
    ],
    views: [
        'WorkspaceStartAdmin',
        'StartInvoerWindow',
        'StarttijdWindow',
        'LandingstijdWindow',
        'StartVerwijderWindow',
        'AvatarWindow',
        'LidBeheerWindow',
        'VliegtuigBeheerWindow',
        'RoosterWindow',
        'LoginWindow',
        'CommStatusWindow',
        'StartDetailsWindow',
        'FlarmStartWindow',
        'LinkFlarmStartWindow',
        'CopyStarttijdWindow',
        'CopyLandingstijdWindow',
        'ControleDetailsWindow',
        'Hoofscherm',
        'StartlijstTab',
        'DagInfoTab',
        'LedenTab',
        'VliegtuigenTab',
        'KaartTab',
        'ControleTab',
        'DetailsPanel',
        'LogboekWindow',
        'ControleStartLiijstFlarmTab',
        'ControleDagOverzichtTab',
        'ExportTab',
        'ControleTijdelijk',
        'AanpassenTijdelijkLidWindow',
        'AanwezigTab',
        'LidVandaagAanwezigWindow'
    ],
    name: 'GeZC_StartAdministratie',

    requires: [
        'GeZC_StartAdministratie.view.WorkspaceStartAdmin',
        'GeZC_StartAdministratie.view.StartInvoerWindow',
        'GeZC_StartAdministratie.view.StarttijdWindow',
        'GeZC_StartAdministratie.view.LandingstijdWindow',
        'GeZC_StartAdministratie.view.StartVerwijderWindow',
        'GeZC_StartAdministratie.view.AvatarWindow',
        'GeZC_StartAdministratie.view.LidBeheerWindow',
        'GeZC_StartAdministratie.view.VliegtuigBeheerWindow',
        'GeZC_StartAdministratie.view.RoosterWindow',
        'GeZC_StartAdministratie.view.LoginWindow',
        'GeZC_StartAdministratie.view.CommStatusWindow',
        'GeZC_StartAdministratie.view.StartDetailsWindow',
        'GeZC_StartAdministratie.view.FlarmStartWindow',
        'GeZC_StartAdministratie.view.LinkFlarmStartWindow',
        'GeZC_StartAdministratie.view.CopyStarttijdWindow',
        'GeZC_StartAdministratie.view.CopyLandingstijdWindow',
        'GeZC_StartAdministratie.view.ControleDetailsWindow',
        'GeZC_StartAdministratie.view.Hoofscherm',
        'GeZC_StartAdministratie.view.StartlijstTab',
        'GeZC_StartAdministratie.view.DagInfoTab',
        'GeZC_StartAdministratie.view.LedenTab',
        'GeZC_StartAdministratie.view.VliegtuigenTab',
        'GeZC_StartAdministratie.view.KaartTab',
        'GeZC_StartAdministratie.view.ControleTab',
        'GeZC_StartAdministratie.view.DetailsPanel',
        'GeZC_StartAdministratie.view.LogboekWindow',
        'GeZC_StartAdministratie.view.ControleStartLiijstFlarmTab',
        'GeZC_StartAdministratie.view.ControleDagOverzichtTab',
        'GeZC_StartAdministratie.view.ExportTab',
        'GeZC_StartAdministratie.view.ControleTijdelijk',
        'GeZC_StartAdministratie.view.AanpassenTijdelijkLidWindow',
        'GeZC_StartAdministratie.view.AanwezigTab',
        'GeZC_StartAdministratie.view.LidVandaagAanwezigWindow',
        'Ext.window.MessageBox'
    ],

    launch: function() {
        Ext.create('GeZC_StartAdministratie.view.WorkspaceStartAdmin');

        Ext.Loader.setConfig({disableCaching: false});

        // Laat de klok op het hoofdschem tikken
        UpdateClock();

        // controleer of we ingelogd zijn op de server
        var request_url = "php/main.php?Action=Login.heeftToegang";
        var conn = new Ext.data.Connection();
        conn.request
        ({
            url:request_url,
            method:'GET',
            success: function(responseObject)
            {
                Ext.data.StoreManager.lookup('AppSettings_Store').load(
                    {
                        callback: function(records, operation, success)
                        {
                            // De server verteld ons wat de zonsopkomst en zonsondergang is voor vandaag
                            // We vliegen alleen overdag dus kunnen we voorkomen dat er verkeerde tijden
                            // ingevoerd worden in de starttoren
                            var connOp = new Ext.data.Connection();
                            connOp.request
                            ({
                                url:"php/main.php?Action=ZonOpOnder.ZonOpkomst",
                                success: function(response)
                                {
                                    console.log(sprintf("%s: zonOpkomst=%s",TijdStempel(), response.responseText));

                                    if (response.responseText !== "")
                                    {
                                        var t = response.responseText.split(":");

                                        zonOpkomst = new Date();
                                        zonOpkomst.setHours(t[0]);
                                        zonOpkomst.setMinutes(t[1]);
                                        console.log(sprintf("%s: zonOpkomst=%s",TijdStempel(), zonOpkomst));
                                    }
                                }
                            });

                            var connOnder = new Ext.data.Connection();
                            connOnder.request
                            ({
                                url:"php/main.php?Action=ZonOpOnder.ZonOnder",
                                success: function(response)
                                {
                                    console.log(sprintf("%s: zonOndergang=%s",TijdStempel(), response.responseText));


                                    if (response.responseText !== "")
                                    {
                                        var t = response.responseText.split(":");

                                        zonOndergang = new Date();
                                        zonOndergang.setHours(t[0]);
                                        zonOndergang.setMinutes(t[1]);
                                        console.log(sprintf("%s: zonOpkomst=%s",TijdStempel(), zonOndergang));
                                    }
                                }
                            });

                            // Zorg dat de store's geladen zijn met de laatste data
                            setTimeout(InitStores, 1 * 1000);


                            // Een aantal stores worden automatisch geladen, start het laden over 15 seconden. De vertraging is bedoeld
                            // om een hoge load bij het opstarten te voorkomen
                            setTimeout(AutomatischLaden,5 * 1000);

                            // Wanneer de dag informatie niet is ingevuld wordt er een waarschuwing gegeven
                            // Wacht 2 minuten voordat de eerste melding komt
                            setTimeout(Ext.Daginfo.DagInfoWaarschuwing,120 * 1000);

                            // Als er een vliegtuig gestart is zonder dat de piloot, dan wordt er een melding gegeven dat er informatie
                            // ontbreekt. Dit voorkomt dat er achteraf een zoektocht moet worden gehouden naar de piloot
                            setTimeout(Ext.Hoofdscherm.StartZonderPilootWaarschuwing,120 * 1000);

                            // vliegtijd automatisch aanpassen in javascript, zonder data op te halen uit de database
                            setTimeout(BijhoudenVliegtijd,60 * 1000);

                            // Communicatie status van GeZC Sync windows service, laat status op het hoofdscherm zien
                            setTimeout(OphalenSyncStatus, 10 * 1000);

                            // Flarm status van GeZC Sync windows service, laat status op het hoofdscherm zien
                            setTimeout(OphalenFlarmStatus, 10 * 1000);

                            // Vervelend van tree view is dat ze automatisch laden. Dat kun je voorkomen door de store leeg te laten
                            // Als er wel automatsch geladen wordt, gebeurd dat ook terwijl de gebruiker niet is ingelogd
                            // Er komt dan een 401 (not authorized) error. Dat is vervelend
                            // Geeft ook na inloggen een probleem omdat php session soms nog niet (soms ook wel) gezet is
                            // en dat geeft onstabliteit en foutmeldingen
                            // Dat voorkomen we door nu pas de store toe te kennen aan de treeviews
                            //Ext.getCmp('VliegersTreeView').bindStore(Ext.data.StoreManager.lookup('StartLijst_VliegerTreeview_Store'));
                            //Ext.getCmp('ClubKistenTreeView').binStore(Ext.data.StoreManager.lookup('StartLijst_VliegtuigenTreeview_Store'));


                            // Nu alles geladen is laten we het hoofdscherm zien
                            Ext.getCmp('HoofdScherm').show();
                        }
                    });
            },
            failure: function()
            {
                // We hebben geen toegang, toon het login scherm
                Ext.create('GeZC_StartAdministratie.view.LoginWindow').show();
            }
        });
    },

    init: function() {

    }

});
